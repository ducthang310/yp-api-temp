version: 2.1

.only-master: &only-master
  filters:
    branches:
      only: master

.only-preprod-tag: &only-preprod-tag
  filters:
    branches:
      only:
        - /^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}-g[0-9]{1,2}$/
        - /^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}-hotfix$/

.only-prod-tag: &only-prod-tag
  filters:
    branches:
      ignore: "/.*/"
    tags:
      only:
        - /^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}-g[0-9]{1,2}$/
        - /^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}-hotfix$/

.configure-npmrc: &configure-npmrc
  name: Configure .npmrc
  command: |
    echo "@yaradigitallabs:registry=https://npm.pkg.github.com/" > .npmrc
    echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> .npmrc

jobs:
  build-and-test:
    docker:
      - image: cimg/node:14.15.5
    working_directory: /home/circleci/repo
    steps:
      - checkout
      - run:
          <<: *configure-npmrc
      - run:
          name: Run install
          command: yarn install
      - run:
          name: Run Build
          command: yarn build
      - run:
          name: Run Lint
          command: yarn lint .
      - run:
          name: Run Audit
          command: yarn audit
      - run:
          name: Setup Code Climate
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run Test
          command: yarn test:coverage -w 1
      - run:
          name: Upload Coverage to Code Climate
          command: |
            ./cc-test-reporter format-coverage -d -t lcov ./coverage/lcov.info
            ./cc-test-reporter upload-coverage -d
      - run:
          name: Validate Swagger
          command: yarn swagger-cli validate openapi-spec.json

  build-push-docker-image:
    machine:
      image: ubuntu-2004:202111-01
    working_directory: /home/circleci/repo
    steps:
      - checkout
      - run:
          <<: *configure-npmrc
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: docker_build
          command: |
            pip install --user awscli==1.19.67
            export PATH="$(python -m site --user-base)/bin:${PATH}"
            [[ -n "$CIRCLE_TAG" ]] && IMAGE_TAG="$CIRCLE_TAG" || IMAGE_TAG=`echo ${CIRCLE_SHA1:0:8}`
            $(aws ecr get-login --registry-ids 387984977604  --no-include-email --region eu-west-1)
            docker build -t ${ECR_REPOSITORY}/${ECR_REPO_NAME}:${IMAGE_TAG} .
            docker push ${ECR_REPOSITORY}/${ECR_REPO_NAME}:${IMAGE_TAG}
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/circleci/repo/docker-cache
  deploy:
    machine:
      image: ubuntu-2004:202111-01
    working_directory: /home/circleci/repo
    parameters:
      env:
        type: enum
        enum: ["stage", "preprod", "production"]
        default: "stage"
      CONTRAST__SERVER__ENVIRONMENT:
        type: string
      CONTRAST__SERVER__NAME:
        type: string
      CONTRAST__APPLICATION__NAME:
        type: string
      HELMFILE_LOCATION:
        type: string
      HELMFILE_PATH:
        type: string
      HELMFILE_PATH_APP:
        type: string
    environment:
      ENVIRONMENT: << parameters.env >>
      HELMFILE_LOCATION: /home/app/infra/helmfile.yaml
    steps:
      - checkout:
          path: /home/circleci/repo
      - restore_cache:
          key: v1-envs-{{ .Environment.CIRCLE_WORKFLOW_ID }}{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Kube Deployment yc-marketplace-service
          command: |
            pip install --user awscli==1.19.67
            export PATH="$(python -m site --user-base)/bin:${PATH}"
            $(aws ecr get-login --registry-ids 387984977604 --no-include-email --region eu-west-1)
            sudo chown -R 1000:1000 /home/circleci/repo
            docker pull ${ECR_REPOSITORY}/${CIRCLE_CI_HELM_SCRIPTS_IMAGE}
            [[ -n "$CIRCLE_TAG" ]] && IMAGE_TAG="$CIRCLE_TAG" || IMAGE_TAG=`echo ${CIRCLE_SHA1:0:8}`
            docker run --add-host kubernetes.default.svc:127.0.0.1 \
            --env ECR_REPOSITORY=${ECR_REPOSITORY} \
            --env ECR_REPO_NAME=${ECR_REPO_NAME} \
            --env IMAGE_TAG=${IMAGE_TAG} \
            --env API_HOST=${KUBE_API_ADDR} \
            --env BASTION_HOST=${BASTION_HOST} \
            --env YARA_REGION="${YARA_REGION}" \
            --env ENVIRONMENT="${ENVIRONMENT}" \
            --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            --env AWS_REGION=${AWS_DEFAULT_REGION} \
            --env KUBECFG_64=${KUBECONFIG} \
            --env HELM3="true" \
            --env HELMFILE_LOCATION=<< parameters.HELMFILE_LOCATION >> \
            --env HELM_TIMEOUT_IN_SEC=2100 \
            --env CONTRAST_API_KEY=${CONTRAST_API_KEY} \
            --env CONTRAST_AGENT_SERVICE_KEY=${CONTRAST_AGENT_SERVICE_KEY} \
            --env CONTRAST_AGENT_USERNAME=${CONTRAST_AGENT_USERNAME} \
            --env CONTRAST_API_URL=${CONTRAST_API_URL} \
            --env CONTRAST__SERVER__ENVIRONMENT=<< parameters.CONTRAST__SERVER__ENVIRONMENT >> \
            --env CONTRAST__SERVER__NAME=<< parameters.CONTRAST__SERVER__NAME >> \
            --env CONTRAST__APPLICATION__NAME=<< parameters.CONTRAST__APPLICATION__NAME >> \
            --volume << parameters.HELMFILE_PATH >>:<< parameters.HELMFILE_PATH_APP >> ${ECR_REPOSITORY}/${CIRCLE_CI_HELM_SCRIPTS_IMAGE} --deploy=true

workflows:
  version: 2
  branch-development:
    jobs:
      - build-and-test:
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_STAGE
            - PRODUCT_SERVICE
          filters:
            branches:
              ignore:
                - master

  stage-deployment:
    jobs:
      - build-push-docker-image:
          name: build-stage-image
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_STAGE
            - PRODUCT_SERVICE
          <<: *only-master
      - approve-stage:
          name: approve-stage
          type: approval
          requires:
            - build-stage-image
          <<: *only-master
      - deploy:
          name: deploy-stage
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_STAGE
            - CONTRAST_API
          env: stage
          CONTRAST__SERVER__NAME: "YC-Marketplace-BE-in"
          CONTRAST__SERVER__ENVIRONMENT: "STAGE"
          CONTRAST__APPLICATION__NAME: "YC-Marketplace-Service"
          HELMFILE_LOCATION: /home/app/infra/helmfile.yaml
          HELMFILE_PATH: /home/circleci/repo/infra/
          HELMFILE_PATH_APP: /home/app/infra/
          requires:
            - approve-stage
          <<: *only-master
      
  preprod-deployment:
    jobs:
      - build-push-docker-image:
          name: build-preprod-image
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_PRODUCTION
            - PRODUCT_SERVICE
          <<: *only-preprod-tag

      - approve-preprod:
          name: approve-preprod
          type: approval
          requires:
            - build-preprod-image
          <<: *only-preprod-tag

      - deploy:
          name: deploy-preprod
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_PRODUCTION
            - CONTRAST_API
          env: preprod
          CONTRAST__SERVER__NAME: "YC-Marketplace-BE-in"
          CONTRAST__SERVER__ENVIRONMENT: "PREPROD"
          CONTRAST__APPLICATION__NAME: "YC-Marketplace-Service"
          HELMFILE_LOCATION: /home/app/infra/helmfile.yaml
          HELMFILE_PATH: /home/circleci/repo/infra/
          HELMFILE_PATH_APP: /home/app/infra/
          requires:
            - approve-preprod
          <<: *only-preprod-tag

  production-deployment:
    jobs:
      - build-push-docker-image:
          name: build-production-image
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_PRODUCTION
            - PRODUCT_SERVICE
          <<: *only-prod-tag

      - approve-production:
          name: approve-production
          type: approval
          requires:
            - build-production-image
          <<: *only-prod-tag

      - deploy:
          name: deploy-production
          context:
            - CIRCLE_CI_AWS_IAM_APAC_EKS_PRODUCTION
            - CONTRAST_API
          env: production
          CONTRAST__SERVER__NAME: "YC-Marketplace-BE-in"
          CONTRAST__SERVER__ENVIRONMENT: "PRODUCTION"
          CONTRAST__APPLICATION__NAME: "YC-Marketplace-Service"
          HELMFILE_LOCATION: /home/app/infra/helmfile.yaml
          HELMFILE_PATH: /home/circleci/repo/infra/
          HELMFILE_PATH_APP: /home/app/infra/
          requires:
            - approve-production
          <<: *only-prod-tag